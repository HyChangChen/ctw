<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:websocket="http://www.springframework.org/schema/websocket"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
           http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
           http://www.springframework.org/schema/websocket  http://www.springframework.org/schema/websocket/spring-websocket.xsd
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
       default-autowire="byName">

    <!-- 扫描controller并注册为spring bean -->
    <context:component-scan base-package="com.ctw.**">
        <!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
        <!-- <context:include-filter type="annotation" expression="org.springframework.stereotype.Service"/>-->
    </context:component-scan>
    <!-- 过滤静态资源 -->
    <mvc:resources mapping="/static/**" location="/static/"/>


    <!-- 服务器推送，spring Websocket配置 -->
    <bean id="tomcatRequestUpgradeStrategy"
          class="org.springframework.web.socket.server.standard.TomcatRequestUpgradeStrategy"/>
    <bean id="defaultHandshankHandler" class="org.springframework.web.socket.server.support.DefaultHandshakeHandler">
        <constructor-arg name="requestUpgradeStrategy" ref="tomcatRequestUpgradeStrategy"/>
    </bean>
    <websocket:handlers>
        <websocket:mapping path="/monitorws" handler="monitorPollingHandler"/>
        <websocket:handshake-handler ref="defaultHandshankHandler"/>
        <websocket:sockjs/>
    </websocket:handlers>

    <!-- 统一date格式参数绑定 -->
    <bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="com.ctw.plugins.spring.DateConverter"/>
            </set>
        </property>
    </bean>
    <mvc:default-servlet-handler/>
    <!-- 开启springmvc注解支持 -->
    <mvc:annotation-driven conversion-service="conversionService">
        <mvc:message-converters register-defaults="true">
            <!-- 避免IE执行AJAX时,返回JSON出现下载文件 -->
            <!-- 默认使用json格式数据与前端页面进行交互 -->
            <bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
                <property name="supportedMediaTypes">
                    <list>
                        <value>application/json;charset=UTF-8</value>
                        <value>text/html;charset=UTF-8</value>
                    </list>
                </property>
            </bean>
        </mvc:message-converters>
        <mvc:argument-resolvers>
            <bean class="com.ctw.utils.CurrentUserMethodArgumentResolver"/>
        </mvc:argument-resolvers>
    </mvc:annotation-driven>


    <aop:aspectj-autoproxy expose-proxy="true" proxy-target-class="true"/>

    <mvc:default-servlet-handler/>

    <!-- 系统日志跟踪功能 -->
   <!-- <bean id="log4JDBCImpl" class="com.ctw.plugins.log.Log4JDBCImpl">
        <property name="logInfoService" ref="logInfoServiceImpl"/>
        <property name="rootLogLevel" value="ERROR"/>
        <property name="customLogLevel">
            <map>
                <entry key="com.ctw" value="ERROR"/>
            </map>
        </property>
    </bean>-->

    <!--这个标签用于注册一个自定义拦截器或者是WebRequestInterceptors.
       可以通过定义URL来进行路径请求拦截，可以做到较为细粒度的拦截控制。 -->
    <!-- 默认首页 -->
    <mvc:interceptors>
        <!--多个拦截器,顺序执行-->
        <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <mvc:exclude-mapping path="/login"/>
            <!--如果不配置或/*,将拦截所有的 -->
            <bean class="com.ctw.plugins.intercepter.SecurityIntercepter"/>
        </mvc:interceptor>

      <!--  <mvc:interceptor>
            <mvc:mapping path="/**"/>
            <bean class="com.ctw.plugins.intercepter.LogInterceptor">
                <property name="logAPI" ref="log4JDBCImpl"/>
            </bean>
        </mvc:interceptor>-->
        <!-- session超时 -->
        <mvc:interceptor>
            <mvc:mapping path="/*/*"/>
            <bean class="com.ctw.plugins.intercepter.SessionIntercepeter">
                <property name="allowUrls">
                    <list>
                        <!-- 如果请求中包含以下路径，则不进行拦截 -->
                        <value>/login</value>
                        <value>/static/**</value>
                        <value>/css</value>
                        <value>/image</value>
                        <value>/images</value>
                    </list>
                </property>
            </bean>
        </mvc:interceptor>
    </mvc:interceptors>
    <!-- 自定义异常处理，SimpleMappingExceptionResolver这个类可以是个空类，但是要写，方便在java代码里面使用 -->
    <bean id="exceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="com.ctw.exception.SessionTimeoutException">redirect:/login</prop>
            </props>
        </property>
    </bean>

    <!-- 异常处理, 注: 默认的500和404异常已在web.xml里定义错误页面 -->
    <!-- 1. 首先由定义了@ExceptionHandler的controller里的方法(或使用@ControllerAdvice的bean里的方法)来处理 -->
    <bean class="org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver">
        <property name="order" value="1"/>
    </bean>
    <!-- 2. 若异常未在1里处理, 则使用自定义的ajax异常处理类来处理 -->
    <bean id="ajaxHandlerExceptionResolver" class="com.ctw.plugins.spring.AjaxExceptionHandler">
        <property name="ajaxErrorView" value="error/exception"/>
        <property name="order" value="2"/>
    </bean>


    <!-- FreeMarker视图解析器 -->
    <bean id="viewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
        <property name="suffix" value=".ftl"/>
        <property name="contentType" value="text/html;charset=utf-8"/>
        <property name="exposeRequestAttributes" value="true"/>
        <property name="exposeSessionAttributes" value="true"/>
        <property name="exposeSpringMacroHelpers" value="true"/>
        <!--将request请求内容绑定到freemarker内置变量request上-->
        <property name="requestContextAttribute" value="request"/>
        <property name="order" value="0"/>
    </bean>

    <!--freemarker 模板字符转义-->
    <bean id="fmXmlEscape" class="freemarker.template.utility.XmlEscape"/>
    <bean id="freemarkerConfiguration"
          class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="location" value="classpath:config/freemarker.properties"/>
    </bean>
    <!-- FreeMarker配置-->
    <bean id="freemarkerConfig" class="com.ctw.plugins.tag.ShiroTagFreeMarkerConfigurer">
        <property name="templateLoaderPath" value="/WEB-INF/view/"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="freemarkerVariables">
            <map>
                <entry key="xml_escape" value-ref="fmXmlEscape"/>
            </map>
        </property>
        <property name="freemarkerSettings" ref="freemarkerConfiguration"/>
    </bean>
    <!--引入其他配置文件-->
    <import resource="spring-mvc-shiro.xml"/>
</beans>